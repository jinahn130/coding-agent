version: '3.8'

services:
  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: repo-context-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - repo-context-network

  # Local Weaviate vector database
  weaviate:
    image: semitechnologies/weaviate:1.21.8
    container_name: repo-context-weaviate
    ports:
      - "8082:8080"  # Weaviate API
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=
      - CLUSTER_HOSTNAME=node1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 5
    networks:
      - repo-context-network
    restart: unless-stopped

  # Main API server
  apiserver:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: repo-context-apiserver
    env_file:
      - ../.env
    ports:
      - "8080:8080"  # HTTP API
      - "9090:9090"  # gRPC API
      - "8081:8081"  # Admin (metrics, pprof)
    volumes:
      - ./data/repositories:/app/data/repositories
      - ./data/temp:/app/data/temp
      - ../ui/web:/app/ui/web:ro
    environment:
      # Docker-specific overrides (only what needs to be different from .env)
      - LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379  # Use docker service name instead of localhost
      - WEAVIATE_URL=http://weaviate:8080  # Use docker service name instead of localhost
      - WEAVIATE_HOST=weaviate:8080  # Use docker service name with port
      - WEAVIATE_SCHEME=http  # Explicit scheme
      - UPLOAD_TEMP_DIR=/app/data/temp  # Docker container path
      - UPLOAD_STORAGE_DIR=/app/data/repositories  # Docker container path
      - TRACING_ENDPOINT=http://jaeger:4318  # Use docker service name instead of localhost

    depends_on:
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - repo-context-network
    restart: unless-stopped

  # Web UI (simple nginx server for development)
  ui:
    image: nginx:alpine
    container_name: repo-context-ui
    ports:
      - "3000:80"
    volumes:
      - ../ui/web:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - apiserver
    networks:
      - repo-context-network
    restart: unless-stopped

  # Optional: Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: repo-context-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - repo-context-network
    restart: unless-stopped

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: repo-context-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - repo-context-network
    restart: unless-stopped

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: repo-context-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - repo-context-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  repo-context-network:
    driver: bridge