// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: repocontext.proto

package repocontextv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HitPhase int32

const (
	HitPhase_HIT_PHASE_UNSPECIFIED HitPhase = 0
	HitPhase_HIT_PHASE_EARLY       HitPhase = 1
	HitPhase_HIT_PHASE_FINAL       HitPhase = 2
)

// Enum value maps for HitPhase.
var (
	HitPhase_name = map[int32]string{
		0: "HIT_PHASE_UNSPECIFIED",
		1: "HIT_PHASE_EARLY",
		2: "HIT_PHASE_FINAL",
	}
	HitPhase_value = map[string]int32{
		"HIT_PHASE_UNSPECIFIED": 0,
		"HIT_PHASE_EARLY":       1,
		"HIT_PHASE_FINAL":       2,
	}
)

func (x HitPhase) Enum() *HitPhase {
	p := new(HitPhase)
	*p = x
	return p
}

func (x HitPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HitPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_repocontext_proto_enumTypes[0].Descriptor()
}

func (HitPhase) Type() protoreflect.EnumType {
	return &file_repocontext_proto_enumTypes[0]
}

func (x HitPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HitPhase.Descriptor instead.
func (HitPhase) EnumDescriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{0}
}

type SearchSource int32

const (
	SearchSource_SEARCH_SOURCE_UNSPECIFIED SearchSource = 0
	SearchSource_SEARCH_SOURCE_LEXICAL     SearchSource = 1
	SearchSource_SEARCH_SOURCE_SEMANTIC    SearchSource = 2
	SearchSource_SEARCH_SOURCE_MERGED      SearchSource = 3
)

// Enum value maps for SearchSource.
var (
	SearchSource_name = map[int32]string{
		0: "SEARCH_SOURCE_UNSPECIFIED",
		1: "SEARCH_SOURCE_LEXICAL",
		2: "SEARCH_SOURCE_SEMANTIC",
		3: "SEARCH_SOURCE_MERGED",
	}
	SearchSource_value = map[string]int32{
		"SEARCH_SOURCE_UNSPECIFIED": 0,
		"SEARCH_SOURCE_LEXICAL":     1,
		"SEARCH_SOURCE_SEMANTIC":    2,
		"SEARCH_SOURCE_MERGED":      3,
	}
)

func (x SearchSource) Enum() *SearchSource {
	p := new(SearchSource)
	*p = x
	return p
}

func (x SearchSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchSource) Descriptor() protoreflect.EnumDescriptor {
	return file_repocontext_proto_enumTypes[1].Descriptor()
}

func (SearchSource) Type() protoreflect.EnumType {
	return &file_repocontext_proto_enumTypes[1]
}

func (x SearchSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchSource.Descriptor instead.
func (SearchSource) EnumDescriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{1}
}

type IngestionStatus_State int32

const (
	IngestionStatus_STATE_UNSPECIFIED IngestionStatus_State = 0
	IngestionStatus_STATE_PENDING     IngestionStatus_State = 1
	IngestionStatus_STATE_EXTRACTING  IngestionStatus_State = 2
	IngestionStatus_STATE_CHUNKING    IngestionStatus_State = 3
	IngestionStatus_STATE_EMBEDDING   IngestionStatus_State = 4
	IngestionStatus_STATE_INDEXING    IngestionStatus_State = 5
	IngestionStatus_STATE_READY       IngestionStatus_State = 6
	IngestionStatus_STATE_FAILED      IngestionStatus_State = 7
)

// Enum value maps for IngestionStatus_State.
var (
	IngestionStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_PENDING",
		2: "STATE_EXTRACTING",
		3: "STATE_CHUNKING",
		4: "STATE_EMBEDDING",
		5: "STATE_INDEXING",
		6: "STATE_READY",
		7: "STATE_FAILED",
	}
	IngestionStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_PENDING":     1,
		"STATE_EXTRACTING":  2,
		"STATE_CHUNKING":    3,
		"STATE_EMBEDDING":   4,
		"STATE_INDEXING":    5,
		"STATE_READY":       6,
		"STATE_FAILED":      7,
	}
)

func (x IngestionStatus_State) Enum() *IngestionStatus_State {
	p := new(IngestionStatus_State)
	*p = x
	return p
}

func (x IngestionStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngestionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_repocontext_proto_enumTypes[2].Descriptor()
}

func (IngestionStatus_State) Type() protoreflect.EnumType {
	return &file_repocontext_proto_enumTypes[2]
}

func (x IngestionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngestionStatus_State.Descriptor instead.
func (IngestionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{9, 0}
}

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_SERVING_STATUS_UNSPECIFIED     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING_STATUS_SERVING         HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_SERVING_STATUS_NOT_SERVING     HealthCheckResponse_ServingStatus = 2
	HealthCheckResponse_SERVING_STATUS_SERVICE_UNKNOWN HealthCheckResponse_ServingStatus = 3
)

// Enum value maps for HealthCheckResponse_ServingStatus.
var (
	HealthCheckResponse_ServingStatus_name = map[int32]string{
		0: "SERVING_STATUS_UNSPECIFIED",
		1: "SERVING_STATUS_SERVING",
		2: "SERVING_STATUS_NOT_SERVING",
		3: "SERVING_STATUS_SERVICE_UNKNOWN",
	}
	HealthCheckResponse_ServingStatus_value = map[string]int32{
		"SERVING_STATUS_UNSPECIFIED":     0,
		"SERVING_STATUS_SERVING":         1,
		"SERVING_STATUS_NOT_SERVING":     2,
		"SERVING_STATUS_SERVICE_UNKNOWN": 3,
	}
)

func (x HealthCheckResponse_ServingStatus) Enum() *HealthCheckResponse_ServingStatus {
	p := new(HealthCheckResponse_ServingStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ServingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_repocontext_proto_enumTypes[3].Descriptor()
}

func (HealthCheckResponse_ServingStatus) Type() protoreflect.EnumType {
	return &file_repocontext_proto_enumTypes[3]
}

func (x HealthCheckResponse_ServingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ServingStatus.Descriptor instead.
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{38, 0}
}

// Upload Messages
type UploadRepositoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*UploadRepositoryRequest_FileUpload
	//	*UploadRepositoryRequest_GitRepository
	Source         isUploadRepositoryRequest_Source `protobuf_oneof:"source"`
	TenantId       string                           `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	IdempotencyKey string                           `protobuf:"bytes,4,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	Options        *UploadOptions                   `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UploadRepositoryRequest) Reset() {
	*x = UploadRepositoryRequest{}
	mi := &file_repocontext_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryRequest) ProtoMessage() {}

func (x *UploadRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UploadRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{0}
}

func (x *UploadRepositoryRequest) GetSource() isUploadRepositoryRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UploadRepositoryRequest) GetFileUpload() *FileUpload {
	if x != nil {
		if x, ok := x.Source.(*UploadRepositoryRequest_FileUpload); ok {
			return x.FileUpload
		}
	}
	return nil
}

func (x *UploadRepositoryRequest) GetGitRepository() *GitRepository {
	if x != nil {
		if x, ok := x.Source.(*UploadRepositoryRequest_GitRepository); ok {
			return x.GitRepository
		}
	}
	return nil
}

func (x *UploadRepositoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UploadRepositoryRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *UploadRepositoryRequest) GetOptions() *UploadOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type isUploadRepositoryRequest_Source interface {
	isUploadRepositoryRequest_Source()
}

type UploadRepositoryRequest_FileUpload struct {
	FileUpload *FileUpload `protobuf:"bytes,1,opt,name=file_upload,json=fileUpload,proto3,oneof"`
}

type UploadRepositoryRequest_GitRepository struct {
	GitRepository *GitRepository `protobuf:"bytes,2,opt,name=git_repository,json=gitRepository,proto3,oneof"`
}

func (*UploadRepositoryRequest_FileUpload) isUploadRepositoryRequest_Source() {}

func (*UploadRepositoryRequest_GitRepository) isUploadRepositoryRequest_Source() {}

type UploadGitRepositoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GitRepository  *GitRepository         `protobuf:"bytes,1,opt,name=git_repository,json=gitRepository,proto3" json:"git_repository,omitempty"`
	TenantId       string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	IdempotencyKey string                 `protobuf:"bytes,3,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	Options        *UploadOptions         `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UploadGitRepositoryRequest) Reset() {
	*x = UploadGitRepositoryRequest{}
	mi := &file_repocontext_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadGitRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGitRepositoryRequest) ProtoMessage() {}

func (x *UploadGitRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGitRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UploadGitRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{1}
}

func (x *UploadGitRepositoryRequest) GetGitRepository() *GitRepository {
	if x != nil {
		return x.GitRepository
	}
	return nil
}

func (x *UploadGitRepositoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UploadGitRepositoryRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *UploadGitRepositoryRequest) GetOptions() *UploadOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type FileUpload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Chunk         []byte                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	IsFinal       bool                   `protobuf:"varint,3,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUpload) Reset() {
	*x = FileUpload{}
	mi := &file_repocontext_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpload) ProtoMessage() {}

func (x *FileUpload) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpload.ProtoReflect.Descriptor instead.
func (*FileUpload) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{2}
}

func (x *FileUpload) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileUpload) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FileUpload) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type GitRepository struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Ref           string                 `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"` // branch, tag, or commit
	Credentials   *GitCredentials        `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitRepository) Reset() {
	*x = GitRepository{}
	mi := &file_repocontext_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepository) ProtoMessage() {}

func (x *GitRepository) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepository.ProtoReflect.Descriptor instead.
func (*GitRepository) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{3}
}

func (x *GitRepository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitRepository) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GitRepository) GetCredentials() *GitCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type GitCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // or token
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitCredentials) Reset() {
	*x = GitCredentials{}
	mi := &file_repocontext_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCredentials) ProtoMessage() {}

func (x *GitCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCredentials.ProtoReflect.Descriptor instead.
func (*GitCredentials) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{4}
}

func (x *GitCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UploadOptions struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IncludePatterns []string               `protobuf:"bytes,1,rep,name=include_patterns,json=includePatterns,proto3" json:"include_patterns,omitempty"`
	ExcludePatterns []string               `protobuf:"bytes,2,rep,name=exclude_patterns,json=excludePatterns,proto3" json:"exclude_patterns,omitempty"`
	MaxFileSizeMb   int32                  `protobuf:"varint,3,opt,name=max_file_size_mb,json=maxFileSizeMb,proto3" json:"max_file_size_mb,omitempty"`
	SkipBinaries    bool                   `protobuf:"varint,4,opt,name=skip_binaries,json=skipBinaries,proto3" json:"skip_binaries,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UploadOptions) Reset() {
	*x = UploadOptions{}
	mi := &file_repocontext_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadOptions) ProtoMessage() {}

func (x *UploadOptions) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadOptions.ProtoReflect.Descriptor instead.
func (*UploadOptions) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{5}
}

func (x *UploadOptions) GetIncludePatterns() []string {
	if x != nil {
		return x.IncludePatterns
	}
	return nil
}

func (x *UploadOptions) GetExcludePatterns() []string {
	if x != nil {
		return x.ExcludePatterns
	}
	return nil
}

func (x *UploadOptions) GetMaxFileSizeMb() int32 {
	if x != nil {
		return x.MaxFileSizeMb
	}
	return 0
}

func (x *UploadOptions) GetSkipBinaries() bool {
	if x != nil {
		return x.SkipBinaries
	}
	return false
}

type UploadRepositoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	RepositoryId  string                 `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	AcceptedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	Status        *IngestionStatus       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadRepositoryResponse) Reset() {
	*x = UploadRepositoryResponse{}
	mi := &file_repocontext_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryResponse) ProtoMessage() {}

func (x *UploadRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UploadRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{6}
}

func (x *UploadRepositoryResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UploadRepositoryResponse) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *UploadRepositoryResponse) GetAcceptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

func (x *UploadRepositoryResponse) GetStatus() *IngestionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetUploadStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUploadStatusRequest) Reset() {
	*x = GetUploadStatusRequest{}
	mi := &file_repocontext_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUploadStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadStatusRequest) ProtoMessage() {}

func (x *GetUploadStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadStatusRequest.ProtoReflect.Descriptor instead.
func (*GetUploadStatusRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{7}
}

func (x *GetUploadStatusRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *GetUploadStatusRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetUploadStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	RepositoryId  string                 `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Status        *IngestionStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Progress      *IngestionProgress     `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUploadStatusResponse) Reset() {
	*x = GetUploadStatusResponse{}
	mi := &file_repocontext_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUploadStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadStatusResponse) ProtoMessage() {}

func (x *GetUploadStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadStatusResponse.ProtoReflect.Descriptor instead.
func (*GetUploadStatusResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{8}
}

func (x *GetUploadStatusResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *GetUploadStatusResponse) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *GetUploadStatusResponse) GetStatus() *IngestionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetUploadStatusResponse) GetProgress() *IngestionProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *GetUploadStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type IngestionStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         IngestionStatus_State  `protobuf:"varint,1,opt,name=state,proto3,enum=repocontext.v1.IngestionStatus_State" json:"state,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestionStatus) Reset() {
	*x = IngestionStatus{}
	mi := &file_repocontext_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionStatus) ProtoMessage() {}

func (x *IngestionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionStatus.ProtoReflect.Descriptor instead.
func (*IngestionStatus) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{9}
}

func (x *IngestionStatus) GetState() IngestionStatus_State {
	if x != nil {
		return x.State
	}
	return IngestionStatus_STATE_UNSPECIFIED
}

func (x *IngestionStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type IngestionProgress struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalFiles      int32                  `protobuf:"varint,1,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	ProcessedFiles  int32                  `protobuf:"varint,2,opt,name=processed_files,json=processedFiles,proto3" json:"processed_files,omitempty"`
	TotalChunks     int32                  `protobuf:"varint,3,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	EmbeddedChunks  int32                  `protobuf:"varint,4,opt,name=embedded_chunks,json=embeddedChunks,proto3" json:"embedded_chunks,omitempty"`
	IndexedChunks   int32                  `protobuf:"varint,5,opt,name=indexed_chunks,json=indexedChunks,proto3" json:"indexed_chunks,omitempty"`
	ProgressPercent float32                `protobuf:"fixed32,6,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IngestionProgress) Reset() {
	*x = IngestionProgress{}
	mi := &file_repocontext_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionProgress) ProtoMessage() {}

func (x *IngestionProgress) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionProgress.ProtoReflect.Descriptor instead.
func (*IngestionProgress) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{10}
}

func (x *IngestionProgress) GetTotalFiles() int32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *IngestionProgress) GetProcessedFiles() int32 {
	if x != nil {
		return x.ProcessedFiles
	}
	return 0
}

func (x *IngestionProgress) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *IngestionProgress) GetEmbeddedChunks() int32 {
	if x != nil {
		return x.EmbeddedChunks
	}
	return 0
}

func (x *IngestionProgress) GetIndexedChunks() int32 {
	if x != nil {
		return x.IndexedChunks
	}
	return 0
}

func (x *IngestionProgress) GetProgressPercent() float32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

// Chat Messages
type ChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*ChatRequest_Start
	//	*ChatRequest_ChatMessage
	//	*ChatRequest_Cancel
	Message       isChatRequest_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	mi := &file_repocontext_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{11}
}

func (x *ChatRequest) GetMessage() isChatRequest_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatRequest) GetStart() *ChatStart {
	if x != nil {
		if x, ok := x.Message.(*ChatRequest_Start); ok {
			return x.Start
		}
	}
	return nil
}

func (x *ChatRequest) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Message.(*ChatRequest_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *ChatRequest) GetCancel() *ChatCancel {
	if x != nil {
		if x, ok := x.Message.(*ChatRequest_Cancel); ok {
			return x.Cancel
		}
	}
	return nil
}

type isChatRequest_Message interface {
	isChatRequest_Message()
}

type ChatRequest_Start struct {
	Start *ChatStart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type ChatRequest_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,2,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type ChatRequest_Cancel struct {
	Cancel *ChatCancel `protobuf:"bytes,3,opt,name=cancel,proto3,oneof"`
}

func (*ChatRequest_Start) isChatRequest_Message() {}

func (*ChatRequest_ChatMessage) isChatRequest_Message() {}

func (*ChatRequest_Cancel) isChatRequest_Message() {}

type ChatStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepositoryId  string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Options       *ChatOptions           `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatStart) Reset() {
	*x = ChatStart{}
	mi := &file_repocontext_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStart) ProtoMessage() {}

func (x *ChatStart) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStart.ProtoReflect.Descriptor instead.
func (*ChatStart) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{12}
}

func (x *ChatStart) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *ChatStart) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ChatStart) GetOptions() *ChatOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Filters       *SearchFilters         `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_repocontext_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{13}
}

func (x *ChatMessage) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatMessage) GetFilters() *SearchFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ChatCancel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatCancel) Reset() {
	*x = ChatCancel{}
	mi := &file_repocontext_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCancel) ProtoMessage() {}

func (x *ChatCancel) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCancel.ProtoReflect.Descriptor instead.
func (*ChatCancel) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{14}
}

func (x *ChatCancel) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ChatOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxResults    int32                  `protobuf:"varint,1,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	StreamTokens  bool                   `protobuf:"varint,2,opt,name=stream_tokens,json=streamTokens,proto3" json:"stream_tokens,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatOptions) Reset() {
	*x = ChatOptions{}
	mi := &file_repocontext_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatOptions) ProtoMessage() {}

func (x *ChatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatOptions.ProtoReflect.Descriptor instead.
func (*ChatOptions) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{15}
}

func (x *ChatOptions) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ChatOptions) GetStreamTokens() bool {
	if x != nil {
		return x.StreamTokens
	}
	return false
}

func (x *ChatOptions) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type SearchFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Languages     []string               `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	FilePatterns  []string               `protobuf:"bytes,2,rep,name=file_patterns,json=filePatterns,proto3" json:"file_patterns,omitempty"`
	PathPrefix    string                 `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchFilters) Reset() {
	*x = SearchFilters{}
	mi := &file_repocontext_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilters) ProtoMessage() {}

func (x *SearchFilters) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilters.ProtoReflect.Descriptor instead.
func (*SearchFilters) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{16}
}

func (x *SearchFilters) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *SearchFilters) GetFilePatterns() []string {
	if x != nil {
		return x.FilePatterns
	}
	return nil
}

func (x *SearchFilters) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

type ChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*ChatResponse_SearchStarted
	//	*ChatResponse_SearchHit
	//	*ChatResponse_CompositionStarted
	//	*ChatResponse_CompositionToken
	//	*ChatResponse_CompositionComplete
	//	*ChatResponse_Error
	//	*ChatResponse_Complete
	Message       isChatResponse_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_repocontext_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{17}
}

func (x *ChatResponse) GetMessage() isChatResponse_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatResponse) GetSearchStarted() *SearchStarted {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_SearchStarted); ok {
			return x.SearchStarted
		}
	}
	return nil
}

func (x *ChatResponse) GetSearchHit() *SearchHit {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_SearchHit); ok {
			return x.SearchHit
		}
	}
	return nil
}

func (x *ChatResponse) GetCompositionStarted() *CompositionStarted {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_CompositionStarted); ok {
			return x.CompositionStarted
		}
	}
	return nil
}

func (x *ChatResponse) GetCompositionToken() *CompositionToken {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_CompositionToken); ok {
			return x.CompositionToken
		}
	}
	return nil
}

func (x *ChatResponse) GetCompositionComplete() *CompositionComplete {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_CompositionComplete); ok {
			return x.CompositionComplete
		}
	}
	return nil
}

func (x *ChatResponse) GetError() *ChatError {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ChatResponse) GetComplete() *ChatComplete {
	if x != nil {
		if x, ok := x.Message.(*ChatResponse_Complete); ok {
			return x.Complete
		}
	}
	return nil
}

type isChatResponse_Message interface {
	isChatResponse_Message()
}

type ChatResponse_SearchStarted struct {
	SearchStarted *SearchStarted `protobuf:"bytes,1,opt,name=search_started,json=searchStarted,proto3,oneof"`
}

type ChatResponse_SearchHit struct {
	SearchHit *SearchHit `protobuf:"bytes,2,opt,name=search_hit,json=searchHit,proto3,oneof"`
}

type ChatResponse_CompositionStarted struct {
	CompositionStarted *CompositionStarted `protobuf:"bytes,3,opt,name=composition_started,json=compositionStarted,proto3,oneof"`
}

type ChatResponse_CompositionToken struct {
	CompositionToken *CompositionToken `protobuf:"bytes,4,opt,name=composition_token,json=compositionToken,proto3,oneof"`
}

type ChatResponse_CompositionComplete struct {
	CompositionComplete *CompositionComplete `protobuf:"bytes,5,opt,name=composition_complete,json=compositionComplete,proto3,oneof"`
}

type ChatResponse_Error struct {
	Error *ChatError `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

type ChatResponse_Complete struct {
	Complete *ChatComplete `protobuf:"bytes,7,opt,name=complete,proto3,oneof"`
}

func (*ChatResponse_SearchStarted) isChatResponse_Message() {}

func (*ChatResponse_SearchHit) isChatResponse_Message() {}

func (*ChatResponse_CompositionStarted) isChatResponse_Message() {}

func (*ChatResponse_CompositionToken) isChatResponse_Message() {}

func (*ChatResponse_CompositionComplete) isChatResponse_Message() {}

func (*ChatResponse_Error) isChatResponse_Message() {}

func (*ChatResponse_Complete) isChatResponse_Message() {}

type SearchStarted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchStarted) Reset() {
	*x = SearchStarted{}
	mi := &file_repocontext_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStarted) ProtoMessage() {}

func (x *SearchStarted) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStarted.ProtoReflect.Descriptor instead.
func (*SearchStarted) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{18}
}

func (x *SearchStarted) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SearchStarted) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type SearchHit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Phase         HitPhase               `protobuf:"varint,3,opt,name=phase,proto3,enum=repocontext.v1.HitPhase" json:"phase,omitempty"`
	Rank          int32                  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Chunk         *CodeChunk             `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchHit) Reset() {
	*x = SearchHit{}
	mi := &file_repocontext_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHit) ProtoMessage() {}

func (x *SearchHit) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHit.ProtoReflect.Descriptor instead.
func (*SearchHit) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{19}
}

func (x *SearchHit) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SearchHit) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *SearchHit) GetPhase() HitPhase {
	if x != nil {
		return x.Phase
	}
	return HitPhase_HIT_PHASE_UNSPECIFIED
}

func (x *SearchHit) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SearchHit) GetChunk() *CodeChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type CompositionStarted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ContextChunks int32                  `protobuf:"varint,3,opt,name=context_chunks,json=contextChunks,proto3" json:"context_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompositionStarted) Reset() {
	*x = CompositionStarted{}
	mi := &file_repocontext_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompositionStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionStarted) ProtoMessage() {}

func (x *CompositionStarted) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionStarted.ProtoReflect.Descriptor instead.
func (*CompositionStarted) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{20}
}

func (x *CompositionStarted) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CompositionStarted) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *CompositionStarted) GetContextChunks() int32 {
	if x != nil {
		return x.ContextChunks
	}
	return 0
}

type CompositionToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Text          string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompositionToken) Reset() {
	*x = CompositionToken{}
	mi := &file_repocontext_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompositionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionToken) ProtoMessage() {}

func (x *CompositionToken) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionToken.ProtoReflect.Descriptor instead.
func (*CompositionToken) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{21}
}

func (x *CompositionToken) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CompositionToken) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *CompositionToken) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CompositionComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	FullResponse  string                 `protobuf:"bytes,3,opt,name=full_response,json=fullResponse,proto3" json:"full_response,omitempty"`
	Citations     []*Citation            `protobuf:"bytes,4,rep,name=citations,proto3" json:"citations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompositionComplete) Reset() {
	*x = CompositionComplete{}
	mi := &file_repocontext_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompositionComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionComplete) ProtoMessage() {}

func (x *CompositionComplete) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionComplete.ProtoReflect.Descriptor instead.
func (*CompositionComplete) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{22}
}

func (x *CompositionComplete) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CompositionComplete) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *CompositionComplete) GetFullResponse() string {
	if x != nil {
		return x.FullResponse
	}
	return ""
}

func (x *CompositionComplete) GetCitations() []*Citation {
	if x != nil {
		return x.Citations
	}
	return nil
}

type ChatError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ErrorCode     string                 `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatError) Reset() {
	*x = ChatError{}
	mi := &file_repocontext_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatError) ProtoMessage() {}

func (x *ChatError) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatError.ProtoReflect.Descriptor instead.
func (*ChatError) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{23}
}

func (x *ChatError) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ChatError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ChatComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId       string                 `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Timings       *SearchTimings         `protobuf:"bytes,3,opt,name=timings,proto3" json:"timings,omitempty"`
	Stats         *SearchStats           `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatComplete) Reset() {
	*x = ChatComplete{}
	mi := &file_repocontext_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatComplete) ProtoMessage() {}

func (x *ChatComplete) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatComplete.ProtoReflect.Descriptor instead.
func (*ChatComplete) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{24}
}

func (x *ChatComplete) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatComplete) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *ChatComplete) GetTimings() *SearchTimings {
	if x != nil {
		return x.Timings
	}
	return nil
}

func (x *ChatComplete) GetStats() *SearchStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CodeChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepositoryId  string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	FilePath      string                 `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	StartLine     int32                  `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine       int32                  `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Score         float32                `protobuf:"fixed32,6,opt,name=score,proto3" json:"score,omitempty"`
	Source        SearchSource           `protobuf:"varint,7,opt,name=source,proto3,enum=repocontext.v1.SearchSource" json:"source,omitempty"`
	Language      string                 `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	Symbol        string                 `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeChunk) Reset() {
	*x = CodeChunk{}
	mi := &file_repocontext_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeChunk) ProtoMessage() {}

func (x *CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeChunk.ProtoReflect.Descriptor instead.
func (*CodeChunk) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{25}
}

func (x *CodeChunk) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CodeChunk) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CodeChunk) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *CodeChunk) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *CodeChunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CodeChunk) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CodeChunk) GetSource() SearchSource {
	if x != nil {
		return x.Source
	}
	return SearchSource_SEARCH_SOURCE_UNSPECIFIED
}

func (x *CodeChunk) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CodeChunk) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type Citation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	LineNumber    int32                  `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Excerpt       string                 `protobuf:"bytes,3,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Citation) Reset() {
	*x = Citation{}
	mi := &file_repocontext_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Citation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Citation) ProtoMessage() {}

func (x *Citation) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Citation.ProtoReflect.Descriptor instead.
func (*Citation) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{26}
}

func (x *Citation) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Citation) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *Citation) GetExcerpt() string {
	if x != nil {
		return x.Excerpt
	}
	return ""
}

type SearchTimings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LexicalMs     int32                  `protobuf:"varint,1,opt,name=lexical_ms,json=lexicalMs,proto3" json:"lexical_ms,omitempty"`
	SemanticMs    int32                  `protobuf:"varint,2,opt,name=semantic_ms,json=semanticMs,proto3" json:"semantic_ms,omitempty"`
	MergeMs       int32                  `protobuf:"varint,3,opt,name=merge_ms,json=mergeMs,proto3" json:"merge_ms,omitempty"`
	CompositionMs int32                  `protobuf:"varint,4,opt,name=composition_ms,json=compositionMs,proto3" json:"composition_ms,omitempty"`
	CacheHit      bool                   `protobuf:"varint,5,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchTimings) Reset() {
	*x = SearchTimings{}
	mi := &file_repocontext_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTimings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTimings) ProtoMessage() {}

func (x *SearchTimings) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTimings.ProtoReflect.Descriptor instead.
func (*SearchTimings) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{27}
}

func (x *SearchTimings) GetLexicalMs() int32 {
	if x != nil {
		return x.LexicalMs
	}
	return 0
}

func (x *SearchTimings) GetSemanticMs() int32 {
	if x != nil {
		return x.SemanticMs
	}
	return 0
}

func (x *SearchTimings) GetMergeMs() int32 {
	if x != nil {
		return x.MergeMs
	}
	return 0
}

func (x *SearchTimings) GetCompositionMs() int32 {
	if x != nil {
		return x.CompositionMs
	}
	return 0
}

func (x *SearchTimings) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

type SearchStats struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LexicalCandidates  int32                  `protobuf:"varint,1,opt,name=lexical_candidates,json=lexicalCandidates,proto3" json:"lexical_candidates,omitempty"`
	SemanticCandidates int32                  `protobuf:"varint,2,opt,name=semantic_candidates,json=semanticCandidates,proto3" json:"semantic_candidates,omitempty"`
	MergedResults      int32                  `protobuf:"varint,3,opt,name=merged_results,json=mergedResults,proto3" json:"merged_results,omitempty"`
	ResultsTruncated   bool                   `protobuf:"varint,4,opt,name=results_truncated,json=resultsTruncated,proto3" json:"results_truncated,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SearchStats) Reset() {
	*x = SearchStats{}
	mi := &file_repocontext_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStats) ProtoMessage() {}

func (x *SearchStats) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStats.ProtoReflect.Descriptor instead.
func (*SearchStats) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{28}
}

func (x *SearchStats) GetLexicalCandidates() int32 {
	if x != nil {
		return x.LexicalCandidates
	}
	return 0
}

func (x *SearchStats) GetSemanticCandidates() int32 {
	if x != nil {
		return x.SemanticCandidates
	}
	return 0
}

func (x *SearchStats) GetMergedResults() int32 {
	if x != nil {
		return x.MergedResults
	}
	return 0
}

func (x *SearchStats) GetResultsTruncated() bool {
	if x != nil {
		return x.ResultsTruncated
	}
	return false
}

// Repository Messages
type ListRepositoriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRepositoriesRequest) Reset() {
	*x = ListRepositoriesRequest{}
	mi := &file_repocontext_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesRequest) ProtoMessage() {}

func (x *ListRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{29}
}

func (x *ListRepositoriesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListRepositoriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRepositoriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRepositoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repositories  []*Repository          `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRepositoriesResponse) Reset() {
	*x = ListRepositoriesResponse{}
	mi := &file_repocontext_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesResponse) ProtoMessage() {}

func (x *ListRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*ListRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{30}
}

func (x *ListRepositoriesResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *ListRepositoriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetRepositoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepositoryId  string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoryRequest) Reset() {
	*x = GetRepositoryRequest{}
	mi := &file_repocontext_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryRequest) ProtoMessage() {}

func (x *GetRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{31}
}

func (x *GetRepositoryRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *GetRepositoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetRepositoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    *Repository            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepositoryResponse) Reset() {
	*x = GetRepositoryResponse{}
	mi := &file_repocontext_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryResponse) ProtoMessage() {}

func (x *GetRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryResponse.ProtoReflect.Descriptor instead.
func (*GetRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{32}
}

func (x *GetRepositoryResponse) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type DeleteRepositoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepositoryId  string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRepositoryRequest) Reset() {
	*x = DeleteRepositoryRequest{}
	mi := &file_repocontext_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryRequest) ProtoMessage() {}

func (x *DeleteRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteRepositoryRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *DeleteRepositoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type Repository struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RepositoryId    string                 `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Source          *RepositorySource      `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	IngestionStatus *IngestionStatus       `protobuf:"bytes,5,opt,name=ingestion_status,json=ingestionStatus,proto3" json:"ingestion_status,omitempty"`
	Stats           *RepositoryStats       `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Repository) Reset() {
	*x = Repository{}
	mi := &file_repocontext_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{34}
}

func (x *Repository) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetSource() *RepositorySource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Repository) GetIngestionStatus() *IngestionStatus {
	if x != nil {
		return x.IngestionStatus
	}
	return nil
}

func (x *Repository) GetStats() *RepositoryStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Repository) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Repository) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RepositorySource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*RepositorySource_GitUrl
	//	*RepositorySource_UploadedFilename
	Source        isRepositorySource_Source `protobuf_oneof:"source"`
	Ref           string                    `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	CommitSha     string                    `protobuf:"bytes,4,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositorySource) Reset() {
	*x = RepositorySource{}
	mi := &file_repocontext_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositorySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositorySource) ProtoMessage() {}

func (x *RepositorySource) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositorySource.ProtoReflect.Descriptor instead.
func (*RepositorySource) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{35}
}

func (x *RepositorySource) GetSource() isRepositorySource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RepositorySource) GetGitUrl() string {
	if x != nil {
		if x, ok := x.Source.(*RepositorySource_GitUrl); ok {
			return x.GitUrl
		}
	}
	return ""
}

func (x *RepositorySource) GetUploadedFilename() string {
	if x != nil {
		if x, ok := x.Source.(*RepositorySource_UploadedFilename); ok {
			return x.UploadedFilename
		}
	}
	return ""
}

func (x *RepositorySource) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *RepositorySource) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type isRepositorySource_Source interface {
	isRepositorySource_Source()
}

type RepositorySource_GitUrl struct {
	GitUrl string `protobuf:"bytes,1,opt,name=git_url,json=gitUrl,proto3,oneof"`
}

type RepositorySource_UploadedFilename struct {
	UploadedFilename string `protobuf:"bytes,2,opt,name=uploaded_filename,json=uploadedFilename,proto3,oneof"`
}

func (*RepositorySource_GitUrl) isRepositorySource_Source() {}

func (*RepositorySource_UploadedFilename) isRepositorySource_Source() {}

type RepositoryStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalFiles    int32                  `protobuf:"varint,1,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	TotalLines    int32                  `protobuf:"varint,2,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,3,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	SizeBytes     int64                  `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Languages     []*LanguageStats       `protobuf:"bytes,5,rep,name=languages,proto3" json:"languages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryStats) Reset() {
	*x = RepositoryStats{}
	mi := &file_repocontext_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStats) ProtoMessage() {}

func (x *RepositoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStats.ProtoReflect.Descriptor instead.
func (*RepositoryStats) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{36}
}

func (x *RepositoryStats) GetTotalFiles() int32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *RepositoryStats) GetTotalLines() int32 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

func (x *RepositoryStats) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *RepositoryStats) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *RepositoryStats) GetLanguages() []*LanguageStats {
	if x != nil {
		return x.Languages
	}
	return nil
}

type LanguageStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      string                 `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	FileCount     int32                  `protobuf:"varint,2,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	LineCount     int32                  `protobuf:"varint,3,opt,name=line_count,json=lineCount,proto3" json:"line_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageStats) Reset() {
	*x = LanguageStats{}
	mi := &file_repocontext_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageStats) ProtoMessage() {}

func (x *LanguageStats) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageStats.ProtoReflect.Descriptor instead.
func (*LanguageStats) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{37}
}

func (x *LanguageStats) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *LanguageStats) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

func (x *LanguageStats) GetLineCount() int32 {
	if x != nil {
		return x.LineCount
	}
	return 0
}

// Health Messages
type HealthCheckResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Status        HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=repocontext.v1.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	Components    []*ComponentHealth                `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_repocontext_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{38}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_SERVING_STATUS_UNSPECIFIED
}

func (x *HealthCheckResponse) GetComponents() []*ComponentHealth {
	if x != nil {
		return x.Components
	}
	return nil
}

type ComponentHealth struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Name          string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        HealthCheckResponse_ServingStatus `protobuf:"varint,2,opt,name=status,proto3,enum=repocontext.v1.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	Message       string                            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentHealth) Reset() {
	*x = ComponentHealth{}
	mi := &file_repocontext_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentHealth) ProtoMessage() {}

func (x *ComponentHealth) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentHealth.ProtoReflect.Descriptor instead.
func (*ComponentHealth) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{39}
}

func (x *ComponentHealth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentHealth) GetStatus() HealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_SERVING_STATUS_UNSPECIFIED
}

func (x *ComponentHealth) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_repocontext_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repocontext_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_repocontext_proto_rawDescGZIP(), []int{40}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_repocontext_proto protoreflect.FileDescriptor

const file_repocontext_proto_rawDesc = "" +
	"\n" +
	"\x11repocontext.proto\x12\x0erepocontext.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xa9\x02\n" +
	"\x17UploadRepositoryRequest\x12=\n" +
	"\vfile_upload\x18\x01 \x01(\v2\x1a.repocontext.v1.FileUploadH\x00R\n" +
	"fileUpload\x12F\n" +
	"\x0egit_repository\x18\x02 \x01(\v2\x1d.repocontext.v1.GitRepositoryH\x00R\rgitRepository\x12\x1b\n" +
	"\ttenant_id\x18\x03 \x01(\tR\btenantId\x12'\n" +
	"\x0fidempotency_key\x18\x04 \x01(\tR\x0eidempotencyKey\x127\n" +
	"\aoptions\x18\x05 \x01(\v2\x1d.repocontext.v1.UploadOptionsR\aoptionsB\b\n" +
	"\x06source\"\xe1\x01\n" +
	"\x1aUploadGitRepositoryRequest\x12D\n" +
	"\x0egit_repository\x18\x01 \x01(\v2\x1d.repocontext.v1.GitRepositoryR\rgitRepository\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\x12'\n" +
	"\x0fidempotency_key\x18\x03 \x01(\tR\x0eidempotencyKey\x127\n" +
	"\aoptions\x18\x04 \x01(\v2\x1d.repocontext.v1.UploadOptionsR\aoptions\"Y\n" +
	"\n" +
	"FileUpload\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x14\n" +
	"\x05chunk\x18\x02 \x01(\fR\x05chunk\x12\x19\n" +
	"\bis_final\x18\x03 \x01(\bR\aisFinal\"u\n" +
	"\rGitRepository\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x10\n" +
	"\x03ref\x18\x02 \x01(\tR\x03ref\x12@\n" +
	"\vcredentials\x18\x03 \x01(\v2\x1e.repocontext.v1.GitCredentialsR\vcredentials\"H\n" +
	"\x0eGitCredentials\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"\xb3\x01\n" +
	"\rUploadOptions\x12)\n" +
	"\x10include_patterns\x18\x01 \x03(\tR\x0fincludePatterns\x12)\n" +
	"\x10exclude_patterns\x18\x02 \x03(\tR\x0fexcludePatterns\x12'\n" +
	"\x10max_file_size_mb\x18\x03 \x01(\x05R\rmaxFileSizeMb\x12#\n" +
	"\rskip_binaries\x18\x04 \x01(\bR\fskipBinaries\"\xd2\x01\n" +
	"\x18UploadRepositoryResponse\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12#\n" +
	"\rrepository_id\x18\x02 \x01(\tR\frepositoryId\x12;\n" +
	"\vaccepted_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"acceptedAt\x127\n" +
	"\x06status\x18\x04 \x01(\v2\x1f.repocontext.v1.IngestionStatusR\x06status\"R\n" +
	"\x16GetUploadStatusRequest\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\"\xf8\x01\n" +
	"\x17GetUploadStatusResponse\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12#\n" +
	"\rrepository_id\x18\x02 \x01(\tR\frepositoryId\x127\n" +
	"\x06status\x18\x03 \x01(\v2\x1f.repocontext.v1.IngestionStatusR\x06status\x12=\n" +
	"\bprogress\x18\x04 \x01(\v2!.repocontext.v1.IngestionProgressR\bprogress\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\"\xb3\x02\n" +
	"\x0fIngestionStatus\x12;\n" +
	"\x05state\x18\x01 \x01(\x0e2%.repocontext.v1.IngestionStatus.StateR\x05state\x129\n" +
	"\n" +
	"updated_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\xa7\x01\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSTATE_PENDING\x10\x01\x12\x14\n" +
	"\x10STATE_EXTRACTING\x10\x02\x12\x12\n" +
	"\x0eSTATE_CHUNKING\x10\x03\x12\x13\n" +
	"\x0fSTATE_EMBEDDING\x10\x04\x12\x12\n" +
	"\x0eSTATE_INDEXING\x10\x05\x12\x0f\n" +
	"\vSTATE_READY\x10\x06\x12\x10\n" +
	"\fSTATE_FAILED\x10\a\"\xfb\x01\n" +
	"\x11IngestionProgress\x12\x1f\n" +
	"\vtotal_files\x18\x01 \x01(\x05R\n" +
	"totalFiles\x12'\n" +
	"\x0fprocessed_files\x18\x02 \x01(\x05R\x0eprocessedFiles\x12!\n" +
	"\ftotal_chunks\x18\x03 \x01(\x05R\vtotalChunks\x12'\n" +
	"\x0fembedded_chunks\x18\x04 \x01(\x05R\x0eembeddedChunks\x12%\n" +
	"\x0eindexed_chunks\x18\x05 \x01(\x05R\rindexedChunks\x12)\n" +
	"\x10progress_percent\x18\x06 \x01(\x02R\x0fprogressPercent\"\xc3\x01\n" +
	"\vChatRequest\x121\n" +
	"\x05start\x18\x01 \x01(\v2\x19.repocontext.v1.ChatStartH\x00R\x05start\x12@\n" +
	"\fchat_message\x18\x02 \x01(\v2\x1b.repocontext.v1.ChatMessageH\x00R\vchatMessage\x124\n" +
	"\x06cancel\x18\x03 \x01(\v2\x1a.repocontext.v1.ChatCancelH\x00R\x06cancelB\t\n" +
	"\amessage\"\x84\x01\n" +
	"\tChatStart\x12#\n" +
	"\rrepository_id\x18\x01 \x01(\tR\frepositoryId\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\x125\n" +
	"\aoptions\x18\x03 \x01(\v2\x1b.repocontext.v1.ChatOptionsR\aoptions\"{\n" +
	"\vChatMessage\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x127\n" +
	"\afilters\x18\x03 \x01(\v2\x1d.repocontext.v1.SearchFiltersR\afilters\"+\n" +
	"\n" +
	"ChatCancel\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"i\n" +
	"\vChatOptions\x12\x1f\n" +
	"\vmax_results\x18\x01 \x01(\x05R\n" +
	"maxResults\x12#\n" +
	"\rstream_tokens\x18\x02 \x01(\bR\fstreamTokens\x12\x14\n" +
	"\x05model\x18\x03 \x01(\tR\x05model\"s\n" +
	"\rSearchFilters\x12\x1c\n" +
	"\tlanguages\x18\x01 \x03(\tR\tlanguages\x12#\n" +
	"\rfile_patterns\x18\x02 \x03(\tR\ffilePatterns\x12\x1f\n" +
	"\vpath_prefix\x18\x03 \x01(\tR\n" +
	"pathPrefix\"\x8e\x04\n" +
	"\fChatResponse\x12F\n" +
	"\x0esearch_started\x18\x01 \x01(\v2\x1d.repocontext.v1.SearchStartedH\x00R\rsearchStarted\x12:\n" +
	"\n" +
	"search_hit\x18\x02 \x01(\v2\x19.repocontext.v1.SearchHitH\x00R\tsearchHit\x12U\n" +
	"\x13composition_started\x18\x03 \x01(\v2\".repocontext.v1.CompositionStartedH\x00R\x12compositionStarted\x12O\n" +
	"\x11composition_token\x18\x04 \x01(\v2 .repocontext.v1.CompositionTokenH\x00R\x10compositionToken\x12X\n" +
	"\x14composition_complete\x18\x05 \x01(\v2#.repocontext.v1.CompositionCompleteH\x00R\x13compositionComplete\x121\n" +
	"\x05error\x18\x06 \x01(\v2\x19.repocontext.v1.ChatErrorH\x00R\x05error\x12:\n" +
	"\bcomplete\x18\a \x01(\v2\x1c.repocontext.v1.ChatCompleteH\x00R\bcompleteB\t\n" +
	"\amessage\"I\n" +
	"\rSearchStarted\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\"\xba\x01\n" +
	"\tSearchHit\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\x12.\n" +
	"\x05phase\x18\x03 \x01(\x0e2\x18.repocontext.v1.HitPhaseR\x05phase\x12\x12\n" +
	"\x04rank\x18\x04 \x01(\x05R\x04rank\x12/\n" +
	"\x05chunk\x18\x05 \x01(\v2\x19.repocontext.v1.CodeChunkR\x05chunk\"u\n" +
	"\x12CompositionStarted\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\x12%\n" +
	"\x0econtext_chunks\x18\x03 \x01(\x05R\rcontextChunks\"`\n" +
	"\x10CompositionToken\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\x12\x12\n" +
	"\x04text\x18\x03 \x01(\tR\x04text\"\xac\x01\n" +
	"\x13CompositionComplete\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\x12#\n" +
	"\rfull_response\x18\x03 \x01(\tR\ffullResponse\x126\n" +
	"\tcitations\x18\x04 \x03(\v2\x18.repocontext.v1.CitationR\tcitations\"n\n" +
	"\tChatError\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1d\n" +
	"\n" +
	"error_code\x18\x02 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"\xb4\x01\n" +
	"\fChatComplete\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bquery_id\x18\x02 \x01(\tR\aqueryId\x127\n" +
	"\atimings\x18\x03 \x01(\v2\x1d.repocontext.v1.SearchTimingsR\atimings\x121\n" +
	"\x05stats\x18\x04 \x01(\v2\x1b.repocontext.v1.SearchStatsR\x05stats\"\xa1\x02\n" +
	"\tCodeChunk\x12#\n" +
	"\rrepository_id\x18\x01 \x01(\tR\frepositoryId\x12\x1b\n" +
	"\tfile_path\x18\x02 \x01(\tR\bfilePath\x12\x1d\n" +
	"\n" +
	"start_line\x18\x03 \x01(\x05R\tstartLine\x12\x19\n" +
	"\bend_line\x18\x04 \x01(\x05R\aendLine\x12\x18\n" +
	"\acontent\x18\x05 \x01(\tR\acontent\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x02R\x05score\x124\n" +
	"\x06source\x18\a \x01(\x0e2\x1c.repocontext.v1.SearchSourceR\x06source\x12\x1a\n" +
	"\blanguage\x18\b \x01(\tR\blanguage\x12\x16\n" +
	"\x06symbol\x18\t \x01(\tR\x06symbol\"b\n" +
	"\bCitation\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x1f\n" +
	"\vline_number\x18\x02 \x01(\x05R\n" +
	"lineNumber\x12\x18\n" +
	"\aexcerpt\x18\x03 \x01(\tR\aexcerpt\"\xae\x01\n" +
	"\rSearchTimings\x12\x1d\n" +
	"\n" +
	"lexical_ms\x18\x01 \x01(\x05R\tlexicalMs\x12\x1f\n" +
	"\vsemantic_ms\x18\x02 \x01(\x05R\n" +
	"semanticMs\x12\x19\n" +
	"\bmerge_ms\x18\x03 \x01(\x05R\amergeMs\x12%\n" +
	"\x0ecomposition_ms\x18\x04 \x01(\x05R\rcompositionMs\x12\x1b\n" +
	"\tcache_hit\x18\x05 \x01(\bR\bcacheHit\"\xc1\x01\n" +
	"\vSearchStats\x12-\n" +
	"\x12lexical_candidates\x18\x01 \x01(\x05R\x11lexicalCandidates\x12/\n" +
	"\x13semantic_candidates\x18\x02 \x01(\x05R\x12semanticCandidates\x12%\n" +
	"\x0emerged_results\x18\x03 \x01(\x05R\rmergedResults\x12+\n" +
	"\x11results_truncated\x18\x04 \x01(\bR\x10resultsTruncated\"r\n" +
	"\x17ListRepositoriesRequest\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x82\x01\n" +
	"\x18ListRepositoriesResponse\x12>\n" +
	"\frepositories\x18\x01 \x03(\v2\x1a.repocontext.v1.RepositoryR\frepositories\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"X\n" +
	"\x14GetRepositoryRequest\x12#\n" +
	"\rrepository_id\x18\x01 \x01(\tR\frepositoryId\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\"S\n" +
	"\x15GetRepositoryResponse\x12:\n" +
	"\n" +
	"repository\x18\x01 \x01(\v2\x1a.repocontext.v1.RepositoryR\n" +
	"repository\"[\n" +
	"\x17DeleteRepositoryRequest\x12#\n" +
	"\rrepository_id\x18\x01 \x01(\tR\frepositoryId\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\"\x9a\x03\n" +
	"\n" +
	"Repository\x12#\n" +
	"\rrepository_id\x18\x01 \x01(\tR\frepositoryId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x128\n" +
	"\x06source\x18\x04 \x01(\v2 .repocontext.v1.RepositorySourceR\x06source\x12J\n" +
	"\x10ingestion_status\x18\x05 \x01(\v2\x1f.repocontext.v1.IngestionStatusR\x0fingestionStatus\x125\n" +
	"\x05stats\x18\x06 \x01(\v2\x1f.repocontext.v1.RepositoryStatsR\x05stats\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\x97\x01\n" +
	"\x10RepositorySource\x12\x19\n" +
	"\agit_url\x18\x01 \x01(\tH\x00R\x06gitUrl\x12-\n" +
	"\x11uploaded_filename\x18\x02 \x01(\tH\x00R\x10uploadedFilename\x12\x10\n" +
	"\x03ref\x18\x03 \x01(\tR\x03ref\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x04 \x01(\tR\tcommitShaB\b\n" +
	"\x06source\"\xd2\x01\n" +
	"\x0fRepositoryStats\x12\x1f\n" +
	"\vtotal_files\x18\x01 \x01(\x05R\n" +
	"totalFiles\x12\x1f\n" +
	"\vtotal_lines\x18\x02 \x01(\x05R\n" +
	"totalLines\x12!\n" +
	"\ftotal_chunks\x18\x03 \x01(\x05R\vtotalChunks\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x04 \x01(\x03R\tsizeBytes\x12;\n" +
	"\tlanguages\x18\x05 \x03(\v2\x1d.repocontext.v1.LanguageStatsR\tlanguages\"i\n" +
	"\rLanguageStats\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\x12\x1d\n" +
	"\n" +
	"file_count\x18\x02 \x01(\x05R\tfileCount\x12\x1d\n" +
	"\n" +
	"line_count\x18\x03 \x01(\x05R\tlineCount\"\xb3\x02\n" +
	"\x13HealthCheckResponse\x12I\n" +
	"\x06status\x18\x01 \x01(\x0e21.repocontext.v1.HealthCheckResponse.ServingStatusR\x06status\x12?\n" +
	"\n" +
	"components\x18\x02 \x03(\v2\x1f.repocontext.v1.ComponentHealthR\n" +
	"components\"\x8f\x01\n" +
	"\rServingStatus\x12\x1e\n" +
	"\x1aSERVING_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16SERVING_STATUS_SERVING\x10\x01\x12\x1e\n" +
	"\x1aSERVING_STATUS_NOT_SERVING\x10\x02\x12\"\n" +
	"\x1eSERVING_STATUS_SERVICE_UNKNOWN\x10\x03\"\x8a\x01\n" +
	"\x0fComponentHealth\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12I\n" +
	"\x06status\x18\x02 \x01(\x0e21.repocontext.v1.HealthCheckResponse.ServingStatusR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"b\n" +
	"\fPingResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp*O\n" +
	"\bHitPhase\x12\x19\n" +
	"\x15HIT_PHASE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fHIT_PHASE_EARLY\x10\x01\x12\x13\n" +
	"\x0fHIT_PHASE_FINAL\x10\x02*~\n" +
	"\fSearchSource\x12\x1d\n" +
	"\x19SEARCH_SOURCE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SEARCH_SOURCE_LEXICAL\x10\x01\x12\x1a\n" +
	"\x16SEARCH_SOURCE_SEMANTIC\x10\x02\x12\x18\n" +
	"\x14SEARCH_SOURCE_MERGED\x10\x032\x8f\x03\n" +
	"\rUploadService\x12i\n" +
	"\x10UploadRepository\x12'.repocontext.v1.UploadRepositoryRequest\x1a(.repocontext.v1.UploadRepositoryResponse\"\x00(\x01\x12\x86\x01\n" +
	"\x13UploadGitRepository\x12*.repocontext.v1.UploadGitRepositoryRequest\x1a(.repocontext.v1.UploadRepositoryResponse\"\x19\x82\xd3\xe4\x93\x02\x13:\x01*\"\x0e/v1/upload/git\x12\x89\x01\n" +
	"\x0fGetUploadStatus\x12&.repocontext.v1.GetUploadStatusRequest\x1a'.repocontext.v1.GetUploadStatusResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/upload/{upload_id}/status2d\n" +
	"\vChatService\x12U\n" +
	"\x12ChatWithRepository\x12\x1b.repocontext.v1.ChatRequest\x1a\x1c.repocontext.v1.ChatResponse\"\x00(\x010\x012\x9c\x03\n" +
	"\x11RepositoryService\x12\x7f\n" +
	"\x10ListRepositories\x12'.repocontext.v1.ListRepositoriesRequest\x1a(.repocontext.v1.ListRepositoriesResponse\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/v1/repositories\x12\x86\x01\n" +
	"\rGetRepository\x12$.repocontext.v1.GetRepositoryRequest\x1a%.repocontext.v1.GetRepositoryResponse\"(\x82\xd3\xe4\x93\x02\"\x12 /v1/repositories/{repository_id}\x12}\n" +
	"\x10DeleteRepository\x12'.repocontext.v1.DeleteRepositoryRequest\x1a\x16.google.protobuf.Empty\"(\x82\xd3\xe4\x93\x02\"* /v1/repositories/{repository_id}2\xb3\x01\n" +
	"\rHealthService\x12U\n" +
	"\x05Check\x12\x16.google.protobuf.Empty\x1a#.repocontext.v1.HealthCheckResponse\"\x0f\x82\xd3\xe4\x93\x02\t\x12\a/health\x12K\n" +
	"\x04Ping\x12\x16.google.protobuf.Empty\x1a\x1c.repocontext.v1.PingResponse\"\r\x82\xd3\xe4\x93\x02\a\x12\x05/pingBHZFgithub.com/repo-context-service/proto/gen/repocontext/v1;repocontextv1b\x06proto3"

var (
	file_repocontext_proto_rawDescOnce sync.Once
	file_repocontext_proto_rawDescData []byte
)

func file_repocontext_proto_rawDescGZIP() []byte {
	file_repocontext_proto_rawDescOnce.Do(func() {
		file_repocontext_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_repocontext_proto_rawDesc), len(file_repocontext_proto_rawDesc)))
	})
	return file_repocontext_proto_rawDescData
}

var file_repocontext_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_repocontext_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_repocontext_proto_goTypes = []any{
	(HitPhase)(0),                          // 0: repocontext.v1.HitPhase
	(SearchSource)(0),                      // 1: repocontext.v1.SearchSource
	(IngestionStatus_State)(0),             // 2: repocontext.v1.IngestionStatus.State
	(HealthCheckResponse_ServingStatus)(0), // 3: repocontext.v1.HealthCheckResponse.ServingStatus
	(*UploadRepositoryRequest)(nil),        // 4: repocontext.v1.UploadRepositoryRequest
	(*UploadGitRepositoryRequest)(nil),     // 5: repocontext.v1.UploadGitRepositoryRequest
	(*FileUpload)(nil),                     // 6: repocontext.v1.FileUpload
	(*GitRepository)(nil),                  // 7: repocontext.v1.GitRepository
	(*GitCredentials)(nil),                 // 8: repocontext.v1.GitCredentials
	(*UploadOptions)(nil),                  // 9: repocontext.v1.UploadOptions
	(*UploadRepositoryResponse)(nil),       // 10: repocontext.v1.UploadRepositoryResponse
	(*GetUploadStatusRequest)(nil),         // 11: repocontext.v1.GetUploadStatusRequest
	(*GetUploadStatusResponse)(nil),        // 12: repocontext.v1.GetUploadStatusResponse
	(*IngestionStatus)(nil),                // 13: repocontext.v1.IngestionStatus
	(*IngestionProgress)(nil),              // 14: repocontext.v1.IngestionProgress
	(*ChatRequest)(nil),                    // 15: repocontext.v1.ChatRequest
	(*ChatStart)(nil),                      // 16: repocontext.v1.ChatStart
	(*ChatMessage)(nil),                    // 17: repocontext.v1.ChatMessage
	(*ChatCancel)(nil),                     // 18: repocontext.v1.ChatCancel
	(*ChatOptions)(nil),                    // 19: repocontext.v1.ChatOptions
	(*SearchFilters)(nil),                  // 20: repocontext.v1.SearchFilters
	(*ChatResponse)(nil),                   // 21: repocontext.v1.ChatResponse
	(*SearchStarted)(nil),                  // 22: repocontext.v1.SearchStarted
	(*SearchHit)(nil),                      // 23: repocontext.v1.SearchHit
	(*CompositionStarted)(nil),             // 24: repocontext.v1.CompositionStarted
	(*CompositionToken)(nil),               // 25: repocontext.v1.CompositionToken
	(*CompositionComplete)(nil),            // 26: repocontext.v1.CompositionComplete
	(*ChatError)(nil),                      // 27: repocontext.v1.ChatError
	(*ChatComplete)(nil),                   // 28: repocontext.v1.ChatComplete
	(*CodeChunk)(nil),                      // 29: repocontext.v1.CodeChunk
	(*Citation)(nil),                       // 30: repocontext.v1.Citation
	(*SearchTimings)(nil),                  // 31: repocontext.v1.SearchTimings
	(*SearchStats)(nil),                    // 32: repocontext.v1.SearchStats
	(*ListRepositoriesRequest)(nil),        // 33: repocontext.v1.ListRepositoriesRequest
	(*ListRepositoriesResponse)(nil),       // 34: repocontext.v1.ListRepositoriesResponse
	(*GetRepositoryRequest)(nil),           // 35: repocontext.v1.GetRepositoryRequest
	(*GetRepositoryResponse)(nil),          // 36: repocontext.v1.GetRepositoryResponse
	(*DeleteRepositoryRequest)(nil),        // 37: repocontext.v1.DeleteRepositoryRequest
	(*Repository)(nil),                     // 38: repocontext.v1.Repository
	(*RepositorySource)(nil),               // 39: repocontext.v1.RepositorySource
	(*RepositoryStats)(nil),                // 40: repocontext.v1.RepositoryStats
	(*LanguageStats)(nil),                  // 41: repocontext.v1.LanguageStats
	(*HealthCheckResponse)(nil),            // 42: repocontext.v1.HealthCheckResponse
	(*ComponentHealth)(nil),                // 43: repocontext.v1.ComponentHealth
	(*PingResponse)(nil),                   // 44: repocontext.v1.PingResponse
	(*timestamppb.Timestamp)(nil),          // 45: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 46: google.protobuf.Empty
}
var file_repocontext_proto_depIdxs = []int32{
	6,  // 0: repocontext.v1.UploadRepositoryRequest.file_upload:type_name -> repocontext.v1.FileUpload
	7,  // 1: repocontext.v1.UploadRepositoryRequest.git_repository:type_name -> repocontext.v1.GitRepository
	9,  // 2: repocontext.v1.UploadRepositoryRequest.options:type_name -> repocontext.v1.UploadOptions
	7,  // 3: repocontext.v1.UploadGitRepositoryRequest.git_repository:type_name -> repocontext.v1.GitRepository
	9,  // 4: repocontext.v1.UploadGitRepositoryRequest.options:type_name -> repocontext.v1.UploadOptions
	8,  // 5: repocontext.v1.GitRepository.credentials:type_name -> repocontext.v1.GitCredentials
	45, // 6: repocontext.v1.UploadRepositoryResponse.accepted_at:type_name -> google.protobuf.Timestamp
	13, // 7: repocontext.v1.UploadRepositoryResponse.status:type_name -> repocontext.v1.IngestionStatus
	13, // 8: repocontext.v1.GetUploadStatusResponse.status:type_name -> repocontext.v1.IngestionStatus
	14, // 9: repocontext.v1.GetUploadStatusResponse.progress:type_name -> repocontext.v1.IngestionProgress
	2,  // 10: repocontext.v1.IngestionStatus.state:type_name -> repocontext.v1.IngestionStatus.State
	45, // 11: repocontext.v1.IngestionStatus.updated_at:type_name -> google.protobuf.Timestamp
	16, // 12: repocontext.v1.ChatRequest.start:type_name -> repocontext.v1.ChatStart
	17, // 13: repocontext.v1.ChatRequest.chat_message:type_name -> repocontext.v1.ChatMessage
	18, // 14: repocontext.v1.ChatRequest.cancel:type_name -> repocontext.v1.ChatCancel
	19, // 15: repocontext.v1.ChatStart.options:type_name -> repocontext.v1.ChatOptions
	20, // 16: repocontext.v1.ChatMessage.filters:type_name -> repocontext.v1.SearchFilters
	22, // 17: repocontext.v1.ChatResponse.search_started:type_name -> repocontext.v1.SearchStarted
	23, // 18: repocontext.v1.ChatResponse.search_hit:type_name -> repocontext.v1.SearchHit
	24, // 19: repocontext.v1.ChatResponse.composition_started:type_name -> repocontext.v1.CompositionStarted
	25, // 20: repocontext.v1.ChatResponse.composition_token:type_name -> repocontext.v1.CompositionToken
	26, // 21: repocontext.v1.ChatResponse.composition_complete:type_name -> repocontext.v1.CompositionComplete
	27, // 22: repocontext.v1.ChatResponse.error:type_name -> repocontext.v1.ChatError
	28, // 23: repocontext.v1.ChatResponse.complete:type_name -> repocontext.v1.ChatComplete
	0,  // 24: repocontext.v1.SearchHit.phase:type_name -> repocontext.v1.HitPhase
	29, // 25: repocontext.v1.SearchHit.chunk:type_name -> repocontext.v1.CodeChunk
	30, // 26: repocontext.v1.CompositionComplete.citations:type_name -> repocontext.v1.Citation
	31, // 27: repocontext.v1.ChatComplete.timings:type_name -> repocontext.v1.SearchTimings
	32, // 28: repocontext.v1.ChatComplete.stats:type_name -> repocontext.v1.SearchStats
	1,  // 29: repocontext.v1.CodeChunk.source:type_name -> repocontext.v1.SearchSource
	38, // 30: repocontext.v1.ListRepositoriesResponse.repositories:type_name -> repocontext.v1.Repository
	38, // 31: repocontext.v1.GetRepositoryResponse.repository:type_name -> repocontext.v1.Repository
	39, // 32: repocontext.v1.Repository.source:type_name -> repocontext.v1.RepositorySource
	13, // 33: repocontext.v1.Repository.ingestion_status:type_name -> repocontext.v1.IngestionStatus
	40, // 34: repocontext.v1.Repository.stats:type_name -> repocontext.v1.RepositoryStats
	45, // 35: repocontext.v1.Repository.created_at:type_name -> google.protobuf.Timestamp
	45, // 36: repocontext.v1.Repository.updated_at:type_name -> google.protobuf.Timestamp
	41, // 37: repocontext.v1.RepositoryStats.languages:type_name -> repocontext.v1.LanguageStats
	3,  // 38: repocontext.v1.HealthCheckResponse.status:type_name -> repocontext.v1.HealthCheckResponse.ServingStatus
	43, // 39: repocontext.v1.HealthCheckResponse.components:type_name -> repocontext.v1.ComponentHealth
	3,  // 40: repocontext.v1.ComponentHealth.status:type_name -> repocontext.v1.HealthCheckResponse.ServingStatus
	45, // 41: repocontext.v1.PingResponse.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 42: repocontext.v1.UploadService.UploadRepository:input_type -> repocontext.v1.UploadRepositoryRequest
	5,  // 43: repocontext.v1.UploadService.UploadGitRepository:input_type -> repocontext.v1.UploadGitRepositoryRequest
	11, // 44: repocontext.v1.UploadService.GetUploadStatus:input_type -> repocontext.v1.GetUploadStatusRequest
	15, // 45: repocontext.v1.ChatService.ChatWithRepository:input_type -> repocontext.v1.ChatRequest
	33, // 46: repocontext.v1.RepositoryService.ListRepositories:input_type -> repocontext.v1.ListRepositoriesRequest
	35, // 47: repocontext.v1.RepositoryService.GetRepository:input_type -> repocontext.v1.GetRepositoryRequest
	37, // 48: repocontext.v1.RepositoryService.DeleteRepository:input_type -> repocontext.v1.DeleteRepositoryRequest
	46, // 49: repocontext.v1.HealthService.Check:input_type -> google.protobuf.Empty
	46, // 50: repocontext.v1.HealthService.Ping:input_type -> google.protobuf.Empty
	10, // 51: repocontext.v1.UploadService.UploadRepository:output_type -> repocontext.v1.UploadRepositoryResponse
	10, // 52: repocontext.v1.UploadService.UploadGitRepository:output_type -> repocontext.v1.UploadRepositoryResponse
	12, // 53: repocontext.v1.UploadService.GetUploadStatus:output_type -> repocontext.v1.GetUploadStatusResponse
	21, // 54: repocontext.v1.ChatService.ChatWithRepository:output_type -> repocontext.v1.ChatResponse
	34, // 55: repocontext.v1.RepositoryService.ListRepositories:output_type -> repocontext.v1.ListRepositoriesResponse
	36, // 56: repocontext.v1.RepositoryService.GetRepository:output_type -> repocontext.v1.GetRepositoryResponse
	46, // 57: repocontext.v1.RepositoryService.DeleteRepository:output_type -> google.protobuf.Empty
	42, // 58: repocontext.v1.HealthService.Check:output_type -> repocontext.v1.HealthCheckResponse
	44, // 59: repocontext.v1.HealthService.Ping:output_type -> repocontext.v1.PingResponse
	51, // [51:60] is the sub-list for method output_type
	42, // [42:51] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_repocontext_proto_init() }
func file_repocontext_proto_init() {
	if File_repocontext_proto != nil {
		return
	}
	file_repocontext_proto_msgTypes[0].OneofWrappers = []any{
		(*UploadRepositoryRequest_FileUpload)(nil),
		(*UploadRepositoryRequest_GitRepository)(nil),
	}
	file_repocontext_proto_msgTypes[11].OneofWrappers = []any{
		(*ChatRequest_Start)(nil),
		(*ChatRequest_ChatMessage)(nil),
		(*ChatRequest_Cancel)(nil),
	}
	file_repocontext_proto_msgTypes[17].OneofWrappers = []any{
		(*ChatResponse_SearchStarted)(nil),
		(*ChatResponse_SearchHit)(nil),
		(*ChatResponse_CompositionStarted)(nil),
		(*ChatResponse_CompositionToken)(nil),
		(*ChatResponse_CompositionComplete)(nil),
		(*ChatResponse_Error)(nil),
		(*ChatResponse_Complete)(nil),
	}
	file_repocontext_proto_msgTypes[35].OneofWrappers = []any{
		(*RepositorySource_GitUrl)(nil),
		(*RepositorySource_UploadedFilename)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_repocontext_proto_rawDesc), len(file_repocontext_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_repocontext_proto_goTypes,
		DependencyIndexes: file_repocontext_proto_depIdxs,
		EnumInfos:         file_repocontext_proto_enumTypes,
		MessageInfos:      file_repocontext_proto_msgTypes,
	}.Build()
	File_repocontext_proto = out.File
	file_repocontext_proto_goTypes = nil
	file_repocontext_proto_depIdxs = nil
}
